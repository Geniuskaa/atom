// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: car.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CarServiceClient is the client API for CarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarServiceClient interface {
	RegisterCar(ctx context.Context, in *CarInfo, opts ...grpc.CallOption) (*CarRegistered, error)
	AddCarInfo(ctx context.Context, in *UploadCarInfo, opts ...grpc.CallOption) (*IsOK, error)
	UpdateCarInfo(ctx context.Context, in *UploadCarInfo, opts ...grpc.CallOption) (*IsOK, error)
	DeleteCarInfo(ctx context.Context, in *CarID, opts ...grpc.CallOption) (*IsOK, error)
	GetCarInfo(ctx context.Context, in *CarPlate, opts ...grpc.CallOption) (*CarInfo, error)
	GetAllCarsInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AllCarsInfo, error)
	GetCarMileage(ctx context.Context, in *CarPlate, opts ...grpc.CallOption) (*CarMileage, error)
	AddCarMileage(ctx context.Context, in *CarMileageUpload, opts ...grpc.CallOption) (*IsOK, error)
	GetCarUsageCost(ctx context.Context, in *CarPlateAndCosts, opts ...grpc.CallOption) (*CarUsageCost, error)
	SendCarMetrics(ctx context.Context, opts ...grpc.CallOption) (CarService_SendCarMetricsClient, error)
}

type carServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCarServiceClient(cc grpc.ClientConnInterface) CarServiceClient {
	return &carServiceClient{cc}
}

func (c *carServiceClient) RegisterCar(ctx context.Context, in *CarInfo, opts ...grpc.CallOption) (*CarRegistered, error) {
	out := new(CarRegistered)
	err := c.cc.Invoke(ctx, "/CarService/RegisterCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) AddCarInfo(ctx context.Context, in *UploadCarInfo, opts ...grpc.CallOption) (*IsOK, error) {
	out := new(IsOK)
	err := c.cc.Invoke(ctx, "/CarService/AddCarInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) UpdateCarInfo(ctx context.Context, in *UploadCarInfo, opts ...grpc.CallOption) (*IsOK, error) {
	out := new(IsOK)
	err := c.cc.Invoke(ctx, "/CarService/UpdateCarInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) DeleteCarInfo(ctx context.Context, in *CarID, opts ...grpc.CallOption) (*IsOK, error) {
	out := new(IsOK)
	err := c.cc.Invoke(ctx, "/CarService/DeleteCarInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) GetCarInfo(ctx context.Context, in *CarPlate, opts ...grpc.CallOption) (*CarInfo, error) {
	out := new(CarInfo)
	err := c.cc.Invoke(ctx, "/CarService/GetCarInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) GetAllCarsInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AllCarsInfo, error) {
	out := new(AllCarsInfo)
	err := c.cc.Invoke(ctx, "/CarService/GetAllCarsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) GetCarMileage(ctx context.Context, in *CarPlate, opts ...grpc.CallOption) (*CarMileage, error) {
	out := new(CarMileage)
	err := c.cc.Invoke(ctx, "/CarService/GetCarMileage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) AddCarMileage(ctx context.Context, in *CarMileageUpload, opts ...grpc.CallOption) (*IsOK, error) {
	out := new(IsOK)
	err := c.cc.Invoke(ctx, "/CarService/AddCarMileage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) GetCarUsageCost(ctx context.Context, in *CarPlateAndCosts, opts ...grpc.CallOption) (*CarUsageCost, error) {
	out := new(CarUsageCost)
	err := c.cc.Invoke(ctx, "/CarService/GetCarUsageCost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) SendCarMetrics(ctx context.Context, opts ...grpc.CallOption) (CarService_SendCarMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CarService_ServiceDesc.Streams[0], "/CarService/SendCarMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &carServiceSendCarMetricsClient{stream}
	return x, nil
}

type CarService_SendCarMetricsClient interface {
	Send(*CarMetrics) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type carServiceSendCarMetricsClient struct {
	grpc.ClientStream
}

func (x *carServiceSendCarMetricsClient) Send(m *CarMetrics) error {
	return x.ClientStream.SendMsg(m)
}

func (x *carServiceSendCarMetricsClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CarServiceServer is the server API for CarService service.
// All implementations must embed UnimplementedCarServiceServer
// for forward compatibility
type CarServiceServer interface {
	RegisterCar(context.Context, *CarInfo) (*CarRegistered, error)
	AddCarInfo(context.Context, *UploadCarInfo) (*IsOK, error)
	UpdateCarInfo(context.Context, *UploadCarInfo) (*IsOK, error)
	DeleteCarInfo(context.Context, *CarID) (*IsOK, error)
	GetCarInfo(context.Context, *CarPlate) (*CarInfo, error)
	GetAllCarsInfo(context.Context, *empty.Empty) (*AllCarsInfo, error)
	GetCarMileage(context.Context, *CarPlate) (*CarMileage, error)
	AddCarMileage(context.Context, *CarMileageUpload) (*IsOK, error)
	GetCarUsageCost(context.Context, *CarPlateAndCosts) (*CarUsageCost, error)
	SendCarMetrics(CarService_SendCarMetricsServer) error
	mustEmbedUnimplementedCarServiceServer()
}

// UnimplementedCarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCarServiceServer struct {
}

func (UnimplementedCarServiceServer) RegisterCar(context.Context, *CarInfo) (*CarRegistered, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCar not implemented")
}
func (UnimplementedCarServiceServer) AddCarInfo(context.Context, *UploadCarInfo) (*IsOK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCarInfo not implemented")
}
func (UnimplementedCarServiceServer) UpdateCarInfo(context.Context, *UploadCarInfo) (*IsOK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCarInfo not implemented")
}
func (UnimplementedCarServiceServer) DeleteCarInfo(context.Context, *CarID) (*IsOK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCarInfo not implemented")
}
func (UnimplementedCarServiceServer) GetCarInfo(context.Context, *CarPlate) (*CarInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarInfo not implemented")
}
func (UnimplementedCarServiceServer) GetAllCarsInfo(context.Context, *empty.Empty) (*AllCarsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCarsInfo not implemented")
}
func (UnimplementedCarServiceServer) GetCarMileage(context.Context, *CarPlate) (*CarMileage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarMileage not implemented")
}
func (UnimplementedCarServiceServer) AddCarMileage(context.Context, *CarMileageUpload) (*IsOK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCarMileage not implemented")
}
func (UnimplementedCarServiceServer) GetCarUsageCost(context.Context, *CarPlateAndCosts) (*CarUsageCost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarUsageCost not implemented")
}
func (UnimplementedCarServiceServer) SendCarMetrics(CarService_SendCarMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendCarMetrics not implemented")
}
func (UnimplementedCarServiceServer) mustEmbedUnimplementedCarServiceServer() {}

// UnsafeCarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarServiceServer will
// result in compilation errors.
type UnsafeCarServiceServer interface {
	mustEmbedUnimplementedCarServiceServer()
}

func RegisterCarServiceServer(s grpc.ServiceRegistrar, srv CarServiceServer) {
	s.RegisterService(&CarService_ServiceDesc, srv)
}

func _CarService_RegisterCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).RegisterCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CarService/RegisterCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).RegisterCar(ctx, req.(*CarInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_AddCarInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCarInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).AddCarInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CarService/AddCarInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).AddCarInfo(ctx, req.(*UploadCarInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_UpdateCarInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCarInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).UpdateCarInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CarService/UpdateCarInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).UpdateCarInfo(ctx, req.(*UploadCarInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_DeleteCarInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).DeleteCarInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CarService/DeleteCarInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).DeleteCarInfo(ctx, req.(*CarID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_GetCarInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarPlate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).GetCarInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CarService/GetCarInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).GetCarInfo(ctx, req.(*CarPlate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_GetAllCarsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).GetAllCarsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CarService/GetAllCarsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).GetAllCarsInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_GetCarMileage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarPlate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).GetCarMileage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CarService/GetCarMileage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).GetCarMileage(ctx, req.(*CarPlate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_AddCarMileage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarMileageUpload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).AddCarMileage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CarService/AddCarMileage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).AddCarMileage(ctx, req.(*CarMileageUpload))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_GetCarUsageCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarPlateAndCosts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).GetCarUsageCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CarService/GetCarUsageCost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).GetCarUsageCost(ctx, req.(*CarPlateAndCosts))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_SendCarMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CarServiceServer).SendCarMetrics(&carServiceSendCarMetricsServer{stream})
}

type CarService_SendCarMetricsServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*CarMetrics, error)
	grpc.ServerStream
}

type carServiceSendCarMetricsServer struct {
	grpc.ServerStream
}

func (x *carServiceSendCarMetricsServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *carServiceSendCarMetricsServer) Recv() (*CarMetrics, error) {
	m := new(CarMetrics)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CarService_ServiceDesc is the grpc.ServiceDesc for CarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CarService",
	HandlerType: (*CarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCar",
			Handler:    _CarService_RegisterCar_Handler,
		},
		{
			MethodName: "AddCarInfo",
			Handler:    _CarService_AddCarInfo_Handler,
		},
		{
			MethodName: "UpdateCarInfo",
			Handler:    _CarService_UpdateCarInfo_Handler,
		},
		{
			MethodName: "DeleteCarInfo",
			Handler:    _CarService_DeleteCarInfo_Handler,
		},
		{
			MethodName: "GetCarInfo",
			Handler:    _CarService_GetCarInfo_Handler,
		},
		{
			MethodName: "GetAllCarsInfo",
			Handler:    _CarService_GetAllCarsInfo_Handler,
		},
		{
			MethodName: "GetCarMileage",
			Handler:    _CarService_GetCarMileage_Handler,
		},
		{
			MethodName: "AddCarMileage",
			Handler:    _CarService_AddCarMileage_Handler,
		},
		{
			MethodName: "GetCarUsageCost",
			Handler:    _CarService_GetCarUsageCost_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendCarMetrics",
			Handler:       _CarService_SendCarMetrics_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "car.proto",
}
